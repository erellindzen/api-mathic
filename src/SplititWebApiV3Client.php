<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use SplititWebApiV3Lib\Authentication\OAuth2ProductionCredentials;
use SplititWebApiV3Lib\Authentication\OAuth2ProductionCredentialsBuilder;
use SplititWebApiV3Lib\Authentication\OAuth2ProductionManager;
use SplititWebApiV3Lib\Authentication\OAuth2SandboxCredentials;
use SplititWebApiV3Lib\Authentication\OAuth2SandboxCredentialsBuilder;
use SplititWebApiV3Lib\Authentication\OAuth2SandboxManager;
use SplititWebApiV3Lib\Controllers\InstallmentPlanController;
use SplititWebApiV3Lib\Controllers\OAuthAuthorizationController;
use SplititWebApiV3Lib\Proxy\ProxyConfigurationBuilder;
use SplititWebApiV3Lib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class SplititWebApiV3Client implements ConfigurationInterface
{
    private $installmentPlan;

    private $oAuthAuthorization;

    private $oAuth2SandboxManager;

    private $oAuth2ProductionManager;

    private $proxyConfiguration;

    private $config;

    private $client;

    /**
     * @see SplititWebApiV3ClientBuilder::init()
     * @see SplititWebApiV3ClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->oAuth2SandboxManager = new OAuth2SandboxManager($this->config);
        $this->oAuth2ProductionManager = new OAuth2ProductionManager($this->config);
        $this->validateConfig();
        $this->proxyConfiguration = $this->config['proxyConfiguration'] ?? ConfigurationDefaults::PROXY_CONFIGURATION;
        $this->client = ClientBuilder::init(
            new HttpClient(Configuration::init($this)->proxyConfiguration($this->proxyConfiguration))
        )
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::DEFAULT_)
            ->authManagers([
                'OAuth2-sandbox' => $this->oAuth2SandboxManager,
                'OAuth2-production' => $this->oAuth2ProductionManager
            ])
            ->build();
        $this->oAuth2SandboxManager->setClient($this->client);
        $this->oAuth2ProductionManager->setClient($this->client);
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return SplititWebApiV3ClientBuilder SplititWebApiV3ClientBuilder instance
     */
    public function toBuilder(): SplititWebApiV3ClientBuilder
    {
        $builder = SplititWebApiV3ClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null)
            ->proxyConfiguration($this->getProxyConfigurationBuilder());

        $oAuth2Sandbox = $this->getOAuth2SandboxCredentialsBuilder();
        if ($oAuth2Sandbox != null) {
            $builder->oAuth2SandboxCredentials($oAuth2Sandbox);
        }

        $oAuth2Production = $this->getOAuth2ProductionCredentialsBuilder();
        if ($oAuth2Production != null) {
            $builder->oAuth2ProductionCredentials($oAuth2Production);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getOAuth2SandboxCredentials(): OAuth2SandboxCredentials
    {
        return $this->oAuth2SandboxManager;
    }

    public function getOAuth2SandboxCredentialsBuilder(): ?OAuth2SandboxCredentialsBuilder
    {
        if (
            empty($this->oAuth2SandboxManager->getOAuthClientId()) &&
            empty($this->oAuth2SandboxManager->getOAuthClientSecret())
        ) {
            return null;
        }
        return OAuth2SandboxCredentialsBuilder::init(
            $this->oAuth2SandboxManager->getOAuthClientId(),
            $this->oAuth2SandboxManager->getOAuthClientSecret()
        )
            ->oAuthToken($this->oAuth2SandboxManager->getOAuthToken())
            ->oAuthScopes($this->oAuth2SandboxManager->getOAuthScopes());
    }

    public function getOAuth2ProductionCredentials(): OAuth2ProductionCredentials
    {
        return $this->oAuth2ProductionManager;
    }

    public function getOAuth2ProductionCredentialsBuilder(): ?OAuth2ProductionCredentialsBuilder
    {
        if (
            empty($this->oAuth2ProductionManager->getOAuthClientId()) &&
            empty($this->oAuth2ProductionManager->getOAuthClientSecret())
        ) {
            return null;
        }
        return OAuth2ProductionCredentialsBuilder::init(
            $this->oAuth2ProductionManager->getOAuthClientId(),
            $this->oAuth2ProductionManager->getOAuthClientSecret()
        )
            ->oAuthToken($this->oAuth2ProductionManager->getOAuthToken())
            ->oAuthScopes($this->oAuth2ProductionManager->getOAuthScopes());
    }

    /**
     * Get the proxy configuration builder
     */
    public function getProxyConfigurationBuilder(): ProxyConfigurationBuilder
    {
        return ProxyConfigurationBuilder::init($this->proxyConfiguration['address'])
            ->port($this->proxyConfiguration['port'])
            ->tunnel($this->proxyConfiguration['tunnel'])
            ->auth($this->proxyConfiguration['auth']['user'], $this->proxyConfiguration['auth']['pass'])
            ->authMethod($this->proxyConfiguration['auth']['method']);
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see SplititWebApiV3ClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see SplititWebApiV3ClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Validate required configuration variables
     */
    private function validateConfig(): void
    {
        $builder = SplititWebApiV3ClientBuilder::init();

        $oAuth2Sandbox = $this->getOAuth2SandboxCredentialsBuilder();
        if ($oAuth2Sandbox != null) {
            $builder->oAuth2SandboxCredentials($oAuth2Sandbox);
        }

        $oAuth2Production = $this->getOAuth2ProductionCredentialsBuilder();
        if ($oAuth2Production != null) {
            $builder->oAuth2ProductionCredentials($oAuth2Production);
        }
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::DEFAULT_): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Installment Plan Controller
     */
    public function getInstallmentPlanController(): InstallmentPlanController
    {
        if ($this->installmentPlan == null) {
            $this->installmentPlan = new InstallmentPlanController($this->client);
        }
        return $this->installmentPlan;
    }

    /**
     * Returns O Auth Authorization Controller
     */
    public function getOAuthAuthorizationController(): OAuthAuthorizationController
    {
        if ($this->oAuthAuthorization == null) {
            $this->oAuthAuthorization = new OAuthAuthorizationController($this->client);
        }
        return $this->oAuthAuthorization;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::DEFAULT_ => 'https://web-api-v3.sandbox.splitit.com/',
            Server::ACCESS_TOKEN_SERVER => 'https://id.sandbox.splitit.com/connect',
            Server::ACCESS_TOKEN_SERVER1 => 'https://id.splitit.com/connect'
        ],
        Environment::ENVIRONMENT2 => [
            Server::DEFAULT_ => 'https://web-api-v3.splitit.com/',
            Server::ACCESS_TOKEN_SERVER => 'https://id.sandbox.splitit.com/connect',
            Server::ACCESS_TOKEN_SERVER1 => 'https://id.splitit.com/connect'
        ]
    ];
}
