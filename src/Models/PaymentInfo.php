<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Models;

use SplititWebApiV3Lib\ApiHelper;
use stdClass;

class PaymentInfo implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $cardBin;

    /**
     * @var string|null
     */
    private $cardType;

    /**
     * Returns Card Bin.
     */
    public function getCardBin(): ?string
    {
        return $this->cardBin;
    }

    /**
     * Sets Card Bin.
     *
     * @maps CardBin
     */
    public function setCardBin(?string $cardBin): void
    {
        $this->cardBin = $cardBin;
    }

    /**
     * Returns Card Type.
     */
    public function getCardType(): ?string
    {
        return $this->cardType;
    }

    /**
     * Sets Card Type.
     *
     * @maps CardType
     * @factory \SplititWebApiV3Lib\Models\CardTypeEnum::checkValue
     */
    public function setCardType(?string $cardType): void
    {
        $this->cardType = $cardType;
    }

    /**
     * Converts the PaymentInfo object to a human-readable string representation.
     *
     * @return string The string representation of the PaymentInfo object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('PaymentInfo', ['cardBin' => $this->cardBin, 'cardType' => $this->cardType]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->cardBin)) {
            $json['CardBin']  = $this->cardBin;
        }
        if (isset($this->cardType)) {
            $json['CardType'] = CardTypeEnum::checkValue($this->cardType);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
