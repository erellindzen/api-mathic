<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Models;

use SplititWebApiV3Lib\ApiHelper;
use stdClass;

class PaymentMethodModel implements \JsonSerializable
{
    /**
     * @var string
     */
    private $type;

    /**
     * @var CardData|null
     */
    private $card;

    /**
     * @var string|null
     */
    private $token;

    /**
     * @var BluesnapVaultedShopperToken|null
     */
    private $bluesnapVaultedShopperToken;

    /**
     * @var MockerShopperToken|null
     */
    private $mockerShopperToken;

    /**
     * @var SpreedlyToken|null
     */
    private $spreedlyToken;

    /**
     * @var string|null
     */
    private $cardPAR;

    /**
     * @param string $type
     */
    public function __construct(string $type)
    {
        $this->type = $type;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps Type
     * @factory \SplititWebApiV3Lib\Models\PaymentMethodTypeEnum::checkValue
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Card.
     */
    public function getCard(): ?CardData
    {
        return $this->card;
    }

    /**
     * Sets Card.
     *
     * @maps Card
     */
    public function setCard(?CardData $card): void
    {
        $this->card = $card;
    }

    /**
     * Returns Token.
     */
    public function getToken(): ?string
    {
        return $this->token;
    }

    /**
     * Sets Token.
     *
     * @maps Token
     */
    public function setToken(?string $token): void
    {
        $this->token = $token;
    }

    /**
     * Returns Bluesnap Vaulted Shopper Token.
     */
    public function getBluesnapVaultedShopperToken(): ?BluesnapVaultedShopperToken
    {
        return $this->bluesnapVaultedShopperToken;
    }

    /**
     * Sets Bluesnap Vaulted Shopper Token.
     *
     * @maps BluesnapVaultedShopperToken
     */
    public function setBluesnapVaultedShopperToken(?BluesnapVaultedShopperToken $bluesnapVaultedShopperToken): void
    {
        $this->bluesnapVaultedShopperToken = $bluesnapVaultedShopperToken;
    }

    /**
     * Returns Mocker Shopper Token.
     */
    public function getMockerShopperToken(): ?MockerShopperToken
    {
        return $this->mockerShopperToken;
    }

    /**
     * Sets Mocker Shopper Token.
     *
     * @maps MockerShopperToken
     */
    public function setMockerShopperToken(?MockerShopperToken $mockerShopperToken): void
    {
        $this->mockerShopperToken = $mockerShopperToken;
    }

    /**
     * Returns Spreedly Token.
     */
    public function getSpreedlyToken(): ?SpreedlyToken
    {
        return $this->spreedlyToken;
    }

    /**
     * Sets Spreedly Token.
     *
     * @maps SpreedlyToken
     */
    public function setSpreedlyToken(?SpreedlyToken $spreedlyToken): void
    {
        $this->spreedlyToken = $spreedlyToken;
    }

    /**
     * Returns Card PAR.
     */
    public function getCardPAR(): ?string
    {
        return $this->cardPAR;
    }

    /**
     * Sets Card PAR.
     *
     * @maps CardPAR
     */
    public function setCardPAR(?string $cardPAR): void
    {
        $this->cardPAR = $cardPAR;
    }

    /**
     * Converts the PaymentMethodModel object to a human-readable string representation.
     *
     * @return string The string representation of the PaymentMethodModel object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PaymentMethodModel',
            [
                'type' => $this->type,
                'card' => $this->card,
                'token' => $this->token,
                'bluesnapVaultedShopperToken' => $this->bluesnapVaultedShopperToken,
                'mockerShopperToken' => $this->mockerShopperToken,
                'spreedlyToken' => $this->spreedlyToken,
                'cardPAR' => $this->cardPAR
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['Type']                            = PaymentMethodTypeEnum::checkValue($this->type);
        if (isset($this->card)) {
            $json['Card']                        = $this->card;
        }
        if (isset($this->token)) {
            $json['Token']                       = $this->token;
        }
        if (isset($this->bluesnapVaultedShopperToken)) {
            $json['BluesnapVaultedShopperToken'] = $this->bluesnapVaultedShopperToken;
        }
        if (isset($this->mockerShopperToken)) {
            $json['MockerShopperToken']          = $this->mockerShopperToken;
        }
        if (isset($this->spreedlyToken)) {
            $json['SpreedlyToken']               = $this->spreedlyToken;
        }
        if (isset($this->cardPAR)) {
            $json['CardPAR']                     = $this->cardPAR;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
