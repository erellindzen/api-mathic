<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Models;

use SplititWebApiV3Lib\ApiHelper;
use SplititWebApiV3Lib\Utils\DateTimeHelper;
use stdClass;

class PlanData implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $terminalId;

    /**
     * @var string
     */
    private $totalAmount;

    /**
     * @var float|null
     */
    private $firstInstallmentAmount;

    /**
     * @var string|null
     */
    private $currency;

    /**
     * @var int
     */
    private $numberOfInstallments;

    /**
     * @var string
     */
    private $purchaseMethod;

    /**
     * @var string|null
     */
    private $refOrderNumber;

    /**
     * @var int[]|null
     */
    private $allowedInstallmentOptions;

    /**
     * @var array<string,string>|null
     */
    private $tags;

    /**
     * @var ProcessingData|null
     */
    private $processingData;

    /**
     * @var \DateTime|null
     */
    private $firstInstallmentDate;

    /**
     * @param string $totalAmount
     * @param int $numberOfInstallments
     * @param string $purchaseMethod
     */
    public function __construct(string $totalAmount, int $numberOfInstallments, string $purchaseMethod)
    {
        $this->totalAmount = $totalAmount;
        $this->numberOfInstallments = $numberOfInstallments;
        $this->purchaseMethod = $purchaseMethod;
    }

    /**
     * Returns Terminal Id.
     */
    public function getTerminalId(): ?string
    {
        return $this->terminalId;
    }

    /**
     * Sets Terminal Id.
     *
     * @maps TerminalId
     */
    public function setTerminalId(?string $terminalId): void
    {
        $this->terminalId = $terminalId;
    }

    /**
     * Returns Total Amount.
     */
    public function getTotalAmount(): string
    {
        return $this->totalAmount;
    }

    /**
     * Sets Total Amount.
     *
     * @required
     * @maps TotalAmount
     */
    public function setTotalAmount(string $totalAmount): void
    {
        $this->totalAmount = $totalAmount;
    }

    /**
     * Returns First Installment Amount.
     */
    public function getFirstInstallmentAmount(): ?float
    {
        return $this->firstInstallmentAmount;
    }

    /**
     * Sets First Installment Amount.
     *
     * @maps FirstInstallmentAmount
     */
    public function setFirstInstallmentAmount(?float $firstInstallmentAmount): void
    {
        $this->firstInstallmentAmount = $firstInstallmentAmount;
    }

    /**
     * Returns Currency.
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     *
     * @maps Currency
     */
    public function setCurrency(?string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Number of Installments.
     */
    public function getNumberOfInstallments(): int
    {
        return $this->numberOfInstallments;
    }

    /**
     * Sets Number of Installments.
     *
     * @required
     * @maps NumberOfInstallments
     */
    public function setNumberOfInstallments(int $numberOfInstallments): void
    {
        $this->numberOfInstallments = $numberOfInstallments;
    }

    /**
     * Returns Purchase Method.
     */
    public function getPurchaseMethod(): string
    {
        return $this->purchaseMethod;
    }

    /**
     * Sets Purchase Method.
     *
     * @required
     * @maps PurchaseMethod
     * @factory \SplititWebApiV3Lib\Models\PurchaseMethodEnum::checkValue
     */
    public function setPurchaseMethod(string $purchaseMethod): void
    {
        $this->purchaseMethod = $purchaseMethod;
    }

    /**
     * Returns Ref Order Number.
     */
    public function getRefOrderNumber(): ?string
    {
        return $this->refOrderNumber;
    }

    /**
     * Sets Ref Order Number.
     *
     * @maps RefOrderNumber
     */
    public function setRefOrderNumber(?string $refOrderNumber): void
    {
        $this->refOrderNumber = $refOrderNumber;
    }

    /**
     * Returns Allowed Installment Options.
     *
     * @return int[]|null
     */
    public function getAllowedInstallmentOptions(): ?array
    {
        return $this->allowedInstallmentOptions;
    }

    /**
     * Sets Allowed Installment Options.
     *
     * @maps AllowedInstallmentOptions
     *
     * @param int[]|null $allowedInstallmentOptions
     */
    public function setAllowedInstallmentOptions(?array $allowedInstallmentOptions): void
    {
        $this->allowedInstallmentOptions = $allowedInstallmentOptions;
    }

    /**
     * Returns Tags.
     *
     * @return array<string,string>|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     *
     * @maps Tags
     *
     * @param array<string,string>|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Processing Data.
     */
    public function getProcessingData(): ?ProcessingData
    {
        return $this->processingData;
    }

    /**
     * Sets Processing Data.
     *
     * @maps ProcessingData
     */
    public function setProcessingData(?ProcessingData $processingData): void
    {
        $this->processingData = $processingData;
    }

    /**
     * Returns First Installment Date.
     */
    public function getFirstInstallmentDate(): ?\DateTime
    {
        return $this->firstInstallmentDate;
    }

    /**
     * Sets First Installment Date.
     *
     * @maps FirstInstallmentDate
     * @factory \SplititWebApiV3Lib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setFirstInstallmentDate(?\DateTime $firstInstallmentDate): void
    {
        $this->firstInstallmentDate = $firstInstallmentDate;
    }

    /**
     * Converts the PlanData object to a human-readable string representation.
     *
     * @return string The string representation of the PlanData object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PlanData',
            [
                'terminalId' => $this->terminalId,
                'totalAmount' => $this->totalAmount,
                'firstInstallmentAmount' => $this->firstInstallmentAmount,
                'currency' => $this->currency,
                'numberOfInstallments' => $this->numberOfInstallments,
                'purchaseMethod' => $this->purchaseMethod,
                'refOrderNumber' => $this->refOrderNumber,
                'allowedInstallmentOptions' => $this->allowedInstallmentOptions,
                'tags' => $this->tags,
                'processingData' => $this->processingData,
                'firstInstallmentDate' => $this->firstInstallmentDate
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->terminalId)) {
            $json['TerminalId']                = $this->terminalId;
        }
        $json['TotalAmount']                   = $this->totalAmount;
        if (isset($this->firstInstallmentAmount)) {
            $json['FirstInstallmentAmount']    = $this->firstInstallmentAmount;
        }
        if (isset($this->currency)) {
            $json['Currency']                  = $this->currency;
        }
        $json['NumberOfInstallments']          = $this->numberOfInstallments;
        $json['PurchaseMethod']                = PurchaseMethodEnum::checkValue($this->purchaseMethod);
        if (isset($this->refOrderNumber)) {
            $json['RefOrderNumber']            = $this->refOrderNumber;
        }
        if (isset($this->allowedInstallmentOptions)) {
            $json['AllowedInstallmentOptions'] = $this->allowedInstallmentOptions;
        }
        if (isset($this->tags)) {
            $json['Tags']                      = $this->tags;
        }
        if (isset($this->processingData)) {
            $json['ProcessingData']            = $this->processingData;
        }
        if (isset($this->firstInstallmentDate)) {
            $json['FirstInstallmentDate']      = DateTimeHelper::toRfc3339DateTime($this->firstInstallmentDate);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
