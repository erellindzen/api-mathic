<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Models;

use SplititWebApiV3Lib\ApiHelper;
use stdClass;

class ProcessingData implements \JsonSerializable
{
    /**
     * @var bool|null
     */
    private $attemptThreeDSecured;

    /**
     * @var string|null
     */
    private $softDescriptor;

    /**
     * @var ThreeDSData|null
     */
    private $threeDSData;

    /**
     * Returns Attempt Three D Secured.
     */
    public function getAttemptThreeDSecured(): ?bool
    {
        return $this->attemptThreeDSecured;
    }

    /**
     * Sets Attempt Three D Secured.
     *
     * @maps AttemptThreeDSecured
     */
    public function setAttemptThreeDSecured(?bool $attemptThreeDSecured): void
    {
        $this->attemptThreeDSecured = $attemptThreeDSecured;
    }

    /**
     * Returns Soft Descriptor.
     */
    public function getSoftDescriptor(): ?string
    {
        return $this->softDescriptor;
    }

    /**
     * Sets Soft Descriptor.
     *
     * @maps SoftDescriptor
     */
    public function setSoftDescriptor(?string $softDescriptor): void
    {
        $this->softDescriptor = $softDescriptor;
    }

    /**
     * Returns Three DS Data.
     */
    public function getThreeDSData(): ?ThreeDSData
    {
        return $this->threeDSData;
    }

    /**
     * Sets Three DS Data.
     *
     * @maps ThreeDSData
     */
    public function setThreeDSData(?ThreeDSData $threeDSData): void
    {
        $this->threeDSData = $threeDSData;
    }

    /**
     * Converts the ProcessingData object to a human-readable string representation.
     *
     * @return string The string representation of the ProcessingData object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ProcessingData',
            [
                'attemptThreeDSecured' => $this->attemptThreeDSecured,
                'softDescriptor' => $this->softDescriptor,
                'threeDSData' => $this->threeDSData
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->attemptThreeDSecured)) {
            $json['AttemptThreeDSecured'] = $this->attemptThreeDSecured;
        }
        if (isset($this->softDescriptor)) {
            $json['SoftDescriptor']       = $this->softDescriptor;
        }
        if (isset($this->threeDSData)) {
            $json['ThreeDSData']          = $this->threeDSData;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
