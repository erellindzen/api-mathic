<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Models;

use SplititWebApiV3Lib\ApiHelper;
use stdClass;

class BluesnapVaultedShopperToken implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $token;

    /**
     * @var string|null
     */
    private $last4Digit;

    /**
     * Returns Token.
     */
    public function getToken(): ?string
    {
        return $this->token;
    }

    /**
     * Sets Token.
     *
     * @maps Token
     */
    public function setToken(?string $token): void
    {
        $this->token = $token;
    }

    /**
     * Returns Last 4 Digit.
     */
    public function getLast4Digit(): ?string
    {
        return $this->last4Digit;
    }

    /**
     * Sets Last 4 Digit.
     *
     * @maps Last4Digit
     */
    public function setLast4Digit(?string $last4Digit): void
    {
        $this->last4Digit = $last4Digit;
    }

    /**
     * Converts the BluesnapVaultedShopperToken object to a human-readable string representation.
     *
     * @return string The string representation of the BluesnapVaultedShopperToken object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'BluesnapVaultedShopperToken',
            ['token' => $this->token, 'last4Digit' => $this->last4Digit]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->token)) {
            $json['Token']      = $this->token;
        }
        if (isset($this->last4Digit)) {
            $json['Last4Digit'] = $this->last4Digit;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
