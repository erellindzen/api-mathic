<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Models;

use SplititWebApiV3Lib\ApiHelper;
use stdClass;

class AddressData implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $addressLine;

    /**
     * @var string|null
     */
    private $addressLine2;

    /**
     * @var string|null
     */
    private $city;

    /**
     * @var string|null
     */
    private $country;

    /**
     * @var string|null
     */
    private $state;

    /**
     * @var string|null
     */
    private $zip;

    /**
     * Returns Address Line.
     */
    public function getAddressLine(): ?string
    {
        return $this->addressLine;
    }

    /**
     * Sets Address Line.
     *
     * @maps AddressLine
     */
    public function setAddressLine(?string $addressLine): void
    {
        $this->addressLine = $addressLine;
    }

    /**
     * Returns Address Line 2.
     */
    public function getAddressLine2(): ?string
    {
        return $this->addressLine2;
    }

    /**
     * Sets Address Line 2.
     *
     * @maps AddressLine2
     */
    public function setAddressLine2(?string $addressLine2): void
    {
        $this->addressLine2 = $addressLine2;
    }

    /**
     * Returns City.
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
     * Sets City.
     *
     * @maps City
     */
    public function setCity(?string $city): void
    {
        $this->city = $city;
    }

    /**
     * Returns Country.
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
     * Sets Country.
     *
     * @maps Country
     */
    public function setCountry(?string $country): void
    {
        $this->country = $country;
    }

    /**
     * Returns State.
     */
    public function getState(): ?string
    {
        return $this->state;
    }

    /**
     * Sets State.
     *
     * @maps State
     */
    public function setState(?string $state): void
    {
        $this->state = $state;
    }

    /**
     * Returns Zip.
     */
    public function getZip(): ?string
    {
        return $this->zip;
    }

    /**
     * Sets Zip.
     *
     * @maps Zip
     */
    public function setZip(?string $zip): void
    {
        $this->zip = $zip;
    }

    /**
     * Converts the AddressData object to a human-readable string representation.
     *
     * @return string The string representation of the AddressData object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'AddressData',
            [
                'addressLine' => $this->addressLine,
                'addressLine2' => $this->addressLine2,
                'city' => $this->city,
                'country' => $this->country,
                'state' => $this->state,
                'zip' => $this->zip
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->addressLine)) {
            $json['AddressLine']  = $this->addressLine;
        }
        if (isset($this->addressLine2)) {
            $json['AddressLine2'] = $this->addressLine2;
        }
        if (isset($this->city)) {
            $json['City']         = $this->city;
        }
        if (isset($this->country)) {
            $json['Country']      = $this->country;
        }
        if (isset($this->state)) {
            $json['State']        = $this->state;
        }
        if (isset($this->zip)) {
            $json['Zip']          = $this->zip;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
