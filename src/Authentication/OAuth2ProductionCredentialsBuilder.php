<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Authentication;

use Core\Utils\CoreHelper;
use SplititWebApiV3Lib\Models\OAuthScopeOAuth2ProductionEnum;
use SplititWebApiV3Lib\Models\OAuthToken;

/**
 * Utility class for initializing OAuth2Production security credentials.
 */
class OAuth2ProductionCredentialsBuilder
{
    /**
     * @var array
     */
    private $config;

    private function __construct(array $config)
    {
        $this->config = $config;
    }

    /**
     * Initializer for OAuth2ProductionCredentialsBuilder
     *
     * @param string $oAuthClientId
     * @param string $oAuthClientSecret
     */
    public static function init(string $oAuthClientId, string $oAuthClientSecret): self
    {
        return new self(['oAuthClientId2' => $oAuthClientId, 'oAuthClientSecret2' => $oAuthClientSecret]);
    }

    /**
     * Setter for OAuthClientId.
     *
     * @param string $oAuthClientId
     *
     * @return $this
     */
    public function oAuthClientId(string $oAuthClientId): self
    {
        $this->config['oAuthClientId2'] = $oAuthClientId;
        return $this;
    }

    /**
     * Setter for OAuthClientSecret.
     *
     * @param string $oAuthClientSecret
     *
     * @return $this
     */
    public function oAuthClientSecret(string $oAuthClientSecret): self
    {
        $this->config['oAuthClientSecret2'] = $oAuthClientSecret;
        return $this;
    }

    /**
     * Setter for OAuthToken.
     *
     * @param OAuthToken|null $oAuthToken
     *
     * @return $this
     */
    public function oAuthToken(?OAuthToken $oAuthToken): self
    {
        $this->config['oAuthToken2'] = $oAuthToken;
        return $this;
    }

    /**
     * Setter for OAuthScopes.
     *
     * @param string[]|null $oAuthScopes
     *
     * @return $this
     */
    public function oAuthScopes(?array $oAuthScopes): self
    {
        OAuthScopeOAuth2ProductionEnum::checkValue($oAuthScopes);
        $this->config['oAuthScopes2'] = $oAuthScopes;
        return $this;
    }

    /**
     * Setter for clock skew time in seconds applied while checking the OAuth Token expiry.
     *
     * @param int $oAuthClockSkew
     *
     * @return $this
     */
    public function oAuthClockSkew(int $oAuthClockSkew): self
    {
        $this->config['OAuth2-production-ClockSkew'] = $oAuthClockSkew;
        return $this;
    }

    /**
     * Setter for the OAuthTokenProvider callable with 2 arguments. Arg1 will be the last OAuthToken
     * instance, while Arg2 will be an instance of OAuth2ProductionManager. The return type of callable
     * should be an instance of OAuthToken model.
     *
     * @param callable(OAuthToken, OAuth2ProductionManager): OAuthToken $oAuthTokenProvider
     *
     * @return $this
     */
    public function oAuthTokenProvider(callable $oAuthTokenProvider): self
    {
        $this->config['OAuth2-production-TokenProvider'] = $oAuthTokenProvider;
        return $this;
    }

    /**
     * Setter for the OAuthOnTokenUpdate callable with the updated OAuthToken instance as the only argument.
     * Here the return type of callable should be void
     *
     * @param callable(OAuthToken): void $oAuthOnTokenUpdate
     *
     * @return $this
     */
    public function oAuthOnTokenUpdate(callable $oAuthOnTokenUpdate): self
    {
        $this->config['OAuth2-production-OnTokenUpdate'] = $oAuthOnTokenUpdate;
        return $this;
    }

    public function getConfiguration(): array
    {
        return CoreHelper::clone($this->config);
    }
}
