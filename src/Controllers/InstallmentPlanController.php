<?php

declare(strict_types=1);

/*
 * SplititWebApiV3Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SplititWebApiV3Lib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use SplititWebApiV3Lib\Exceptions\ApiException;
use SplititWebApiV3Lib\Exceptions\FailedResponseException;
use SplititWebApiV3Lib\Exceptions\PlanErrorResponseException;
use SplititWebApiV3Lib\Models\CheckInstallmentsEligibilityRequest;
use SplititWebApiV3Lib\Models\EligibilityTermsAndConditionResponse;
use SplititWebApiV3Lib\Models\InitiatePlanResponse;
use SplititWebApiV3Lib\Models\InstallmentPlanCreateRequest;
use SplititWebApiV3Lib\Models\InstallmentPlanCreateResponse;
use SplititWebApiV3Lib\Models\InstallmentPlanGetResponse;
use SplititWebApiV3Lib\Models\InstallmentPlanInitiateRequest;
use SplititWebApiV3Lib\Models\InstallmentPlanRefundRequest;
use SplititWebApiV3Lib\Models\InstallmentPlanRefundResponse;
use SplititWebApiV3Lib\Models\InstallmentPlanSearchResponse;
use SplititWebApiV3Lib\Models\InstallmentPlanUpdateRequest;
use SplititWebApiV3Lib\Models\InstallmentPlanUpdateRequestByIdentifier;
use SplititWebApiV3Lib\Models\InstallmentPlanUpdateResponse;
use SplititWebApiV3Lib\Models\InstallmentsEligibilityResponse;
use SplititWebApiV3Lib\Models\TestModesEnum;
use SplititWebApiV3Lib\Models\VerifyAuthorizationResponse;

class InstallmentPlanController extends BaseController
{
    /**
     * @param string $installmentPlanNumber
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentPlanGetResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanGet(
        string $installmentPlanNumber,
        ?string $xSplititTouchPoint = null
    ): InstallmentPlanGetResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/installmentplans/{installmentPlanNumber}')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                TemplateParam::init('installmentPlanNumber', $installmentPlanNumber),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentPlanGetResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $xSplititIdempotencyKey
     * @param InstallmentPlanCreateRequest $body
     * @param string|null $xSplititTestMode
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentPlanCreateResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanPost2(
        string $xSplititIdempotencyKey,
        InstallmentPlanCreateRequest $body,
        ?string $xSplititTestMode = null,
        ?string $xSplititTouchPoint = null
    ): InstallmentPlanCreateResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/installmentplans')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                HeaderParam::init('X-Splitit-IdempotencyKey', $xSplititIdempotencyKey),
                HeaderParam::init('Content-Type', 'application/json-patch+json'),
                BodyParam::init($body),
                HeaderParam::init('X-Splitit-TestMode', $xSplititTestMode)
                    ->serializeBy([TestModesEnum::class, 'checkValue']),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('', PlanErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentPlanCreateResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string|null $installmentPlanNumber
     * @param string|null $refOrderNumber
     * @param array|null $extendedParams
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentPlanSearchResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanSearch(
        ?string $installmentPlanNumber = null,
        ?string $refOrderNumber = null,
        ?array $extendedParams = null,
        ?string $xSplititTouchPoint = null
    ): InstallmentPlanSearchResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/installmentplans/search')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                QueryParam::init('installmentPlanNumber', $installmentPlanNumber),
                QueryParam::init('refOrderNumber', $refOrderNumber),
                QueryParam::init('extendedParams', $extendedParams),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentPlanSearchResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $xSplititIdempotencyKey
     * @param InstallmentPlanInitiateRequest $body
     * @param string|null $xSplititTestMode
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InitiatePlanResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanPost(
        string $xSplititIdempotencyKey,
        InstallmentPlanInitiateRequest $body,
        ?string $xSplititTestMode = null,
        ?string $xSplititTouchPoint = null
    ): InitiatePlanResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/installmentplans/initiate')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                HeaderParam::init('X-Splitit-IdempotencyKey', $xSplititIdempotencyKey),
                HeaderParam::init('Content-Type', 'application/json-patch+json'),
                BodyParam::init($body),
                HeaderParam::init('X-Splitit-TestMode', $xSplititTestMode)
                    ->serializeBy([TestModesEnum::class, 'checkValue']),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('', PlanErrorResponseException::class))
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InitiatePlanResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $xSplititIdempotencyKey
     * @param InstallmentPlanUpdateRequestByIdentifier $body
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentPlanUpdateResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanUpdateOrder2(
        string $xSplititIdempotencyKey,
        InstallmentPlanUpdateRequestByIdentifier $body,
        ?string $xSplititTouchPoint = null
    ): InstallmentPlanUpdateResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/api/installmentplans/updateorder')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                HeaderParam::init('X-Splitit-IdempotencyKey', $xSplititIdempotencyKey),
                HeaderParam::init('Content-Type', 'application/json-patch+json'),
                BodyParam::init($body),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentPlanUpdateResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $installmentPlanNumber
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return VerifyAuthorizationResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanVerifyAuthorization(
        string $installmentPlanNumber,
        ?string $xSplititTouchPoint = null
    ): VerifyAuthorizationResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/api/installmentplans/{installmentPlanNumber}/verifyauthorization'
        )
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                TemplateParam::init('installmentPlanNumber', $installmentPlanNumber),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(VerifyAuthorizationResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $installmentPlanNumber
     * @param string $xSplititIdempotencyKey
     * @param InstallmentPlanRefundRequest $body
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentPlanRefundResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanRefund(
        string $installmentPlanNumber,
        string $xSplititIdempotencyKey,
        InstallmentPlanRefundRequest $body,
        ?string $xSplititTouchPoint = null
    ): InstallmentPlanRefundResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/api/installmentplans/{installmentPlanNumber}/refund'
        )
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                TemplateParam::init('installmentPlanNumber', $installmentPlanNumber),
                HeaderParam::init('X-Splitit-IdempotencyKey', $xSplititIdempotencyKey),
                HeaderParam::init('Content-Type', 'application/json-patch+json'),
                BodyParam::init($body),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentPlanRefundResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $xSplititIdempotencyKey
     * @param CheckInstallmentsEligibilityRequest $body
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentsEligibilityResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanCheckEligibility(
        string $xSplititIdempotencyKey,
        CheckInstallmentsEligibilityRequest $body,
        ?string $xSplititTouchPoint = null
    ): InstallmentsEligibilityResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/api/installmentplans/check-eligibility')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                HeaderParam::init('X-Splitit-IdempotencyKey', $xSplititIdempotencyKey),
                HeaderParam::init('Content-Type', 'application/json-patch+json'),
                BodyParam::init($body),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentsEligibilityResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $installmentPlanNumber
     * @param string $xSplititIdempotencyKey
     * @param InstallmentPlanUpdateRequest $body
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return InstallmentPlanUpdateResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanUpdateOrder(
        string $installmentPlanNumber,
        string $xSplititIdempotencyKey,
        InstallmentPlanUpdateRequest $body,
        ?string $xSplititTouchPoint = null
    ): InstallmentPlanUpdateResponse {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PUT,
            '/api/installmentplans/{installmentPlanNumber}/updateorder'
        )
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                TemplateParam::init('installmentPlanNumber', $installmentPlanNumber),
                HeaderParam::init('X-Splitit-IdempotencyKey', $xSplititIdempotencyKey),
                HeaderParam::init('Content-Type', 'application/json-patch+json'),
                BodyParam::init($body),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(InstallmentPlanUpdateResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $ipn
     * @param string|null $xSplititTouchPoint TouchPoint
     *
     * @return EligibilityTermsAndConditionResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function installmentPlanGetEligibilityTermsAndCondition(
        string $ipn,
        ?string $xSplititTouchPoint = null
    ): EligibilityTermsAndConditionResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/api/installmentplans/{ipn}/legal')
            ->auth('OAuth2-sandbox', 'OAuth2-production')
            ->parameters(
                TemplateParam::init('ipn', $ipn),
                HeaderParam::init('X-Splitit-TouchPoint', $xSplititTouchPoint)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('403', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('404', ErrorType::init('', FailedResponseException::class))
            ->throwErrorOn('500', ErrorType::init('', FailedResponseException::class))
            ->type(EligibilityTermsAndConditionResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
